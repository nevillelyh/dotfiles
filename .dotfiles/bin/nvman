#!/bin/bash

# NVIDIA CUDA and cnDNN Manager

set -euo pipefail

if [[ -f "$HOME/.dotfiles/files/bs.sh" ]]; then
    # shellcheck source=/dev/null
    source "$HOME/.dotfiles/files/bs.sh"
else
    eval "$(curl -fsSL https://raw.githubusercontent.com/nevillelyh/dotfiles/main/.dotfiles/files/bs.sh)"
fi

help() {
    echo "Usage: $(basename "$0") <COMMAND> [ARG]..."
    echo
    echo "    Commands:"
    echo "        env"
    echo "        install   <RUNFILE|TARBALL>"
    echo "        list"
    echo "        set       <cuda|cudnn> <VERSION>"
    echo "        test"
    echo "        uninstall <cuda|cudnn> <VERSION>"
    echo "        help"
}

cmd_env() {
    [[ $# -ne 0 ]] && bs_fatal "Invalid argument: $*"
    [[ -d $HOME/.nvman ]] || exit 0
    cuda=$HOME/.nvman/cuda-current
    [[ -L $cuda ]] || bs_fatal "CUDA not installed"
    cudnn=$HOME/.nvman/cudnn-current
    [[ -L $cudnn ]] || bs_fatal "cuDNN not installed"
    echo "export CUDA_PATH=$HOME/.nvman/cuda-current"
    echo "export PATH=$cuda/bin${PATH:+:${PATH}}"
    echo "export LD_LIBRARY_PATH=$cuda/lib64:$cudnn/lib${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}"
}

install_cuda() {
    cuda_version=$(echo "$1" | grep -Po '(?<=^cuda_)[0-9\.]+')
    dest=$HOME/.nvman/cuda-$cuda_version
    [[ -d $dest ]] && bs_fatal "CUDA $cuda_version already installed"
    bs_info "Installing CUDA $cuda_version in $dest"
    mkdir -p "$HOME/.nvman"
    bash "$1" --silent --installpath="$dest" --toolkit --samples --no-opengl-libs --no-drm
    link=$HOME/.nvman/cuda-current
    rm -f "$link"
    ln -rs "$dest" "$link"
}

install_cudnn() {
    # shellcheck disable=SC2001
    cudnn_version=$(echo "$1" | sed 's/cudnn-[^-]*-[^-]*-\([^-]*\)_cuda.*/\1/')
    dest=$HOME/.nvman/cudnn-$cudnn_version
    [[ -d $dest ]] && bs_fatal "cuDNN $cudnn_version already installed"
    bs_info "Installing CUDNN $cudnn_version in $dest"
    mkdir -p "$HOME/.nvman"
    tar xJf "$1" -C "$HOME/.nvman"
    base=$(basename "$1" .tar.xz)
    mv "$HOME/.nvman/$base" "$dest"
    link=$HOME/.nvman/cudnn-current
    rm -f "$link"
    ln -rs "$dest" "$link"
}

# shellcheck disable=SC2034
cmd_install_help="<RUNFILE|TARBALL>"
cmd_install() {
    [[ $# -lt 1 ]] && bs_fatal "Missing RUNFILE or TARBALL"
    [[ $# -gt 1 ]] && bs_fatal "Invalid argument: $*"
    type lspci &> /dev/null || bs_fatal "GPU not found"
    lspci | grep -i nvidia &> /dev/null || bs_fatal "GPU not found"

    base=$(basename "$1")
    ext="${base##*.}"
    case "$ext" in
        run)
            install_cuda "$1"
            ;;
        xz)
            install_cudnn "$1"
            ;;
        *)
            bs_fatal "Unsupported file: $1"
    esac
}

cmd_list() {
    [[ $# -eq 0 ]] || bs_fatal "Invalid argument: $*"
    [[ -d $HOME/.nvman ]] || bs_fatal "nvman not installed"
    cuda=()
    [[ -L "$HOME/.nvman/cuda-current" ]] && current="$(basename "$(readlink -f "$HOME/.nvman/cuda-current")")" || current="UNKNOWN"
    for c in "$HOME"/.nvman/cuda-*; do
        c="$(basename "$c")"
        if [[ "$c" != "cuda-current" ]]; then
            v="${c/#cuda-/}"
            [[ "$c" == "$current" ]] && v="*$v"
            cuda+=("$v")
        fi
    done
    if [[ "${#cuda[@]}" -eq 0 ]]; then
        echo "CUDA not installed"
    else
        echo "CUDA: ${cuda[*]}"
    fi
    cudnn=()
    [[ -L "$HOME/.nvman/cudnn-current" ]] && current="$(basename "$(readlink -f "$HOME/.nvman/cudnn-current")")" || current="UNKNOWN"
    for c in "$HOME"/.nvman/cudnn-*; do
        c="$(basename "$c")"
        if [[ "$c" != "cudnn-current" ]]; then
            v="${c/#cudnn-/}"
            [[ "$c" == "$current" ]] && v="*$v"
            cudnn+=("$v")
        fi
    done
    if [[ "${#cudnn[@]}" -eq 0 ]]; then
        echo "cuDNN not installed"
    else
        echo "cuDNN: ${cudnn[*]}"
    fi
}

# shellcheck disable=SC2034
cmd_set_help="<cuda|cudnn> <VERSION>"
cmd_set() {
    [[ $# -ne 2 ]] && bs_fatal "Invalid argument: $*"
    pkg=$1
    version=$2
    if [[ "$pkg" != "cuda" ]] && [[ "$pkg" != "cudnn" ]]; then
        bs_fatal "Invalid argument: $*"
    fi
    src="$HOME/.nvman/$pkg-$version"
    link="$HOME/.nvman/$pkg-current"
    [[ -d "$src" ]] || bs_fatal "Not installed: $pkg-$version"
    [[ -L "$link" ]] && rm -f "$link"
    ln -rsf "$src" "$link"
}

cmd_test() {
    [[ $# -ne 0 ]] && bs_fatal "Invalid argument: $*"
    cat /proc/driver/nvidia/version
    nvidia-smi

    version=$(basename "$(readlink -f "$HOME/.nvman/cuda-current")")
    version="${version//cuda-/}"
    docker run --rm --gpus all --privileged "nvidia/cuda:$version-base-ubuntu22.04" nvidia-smi
    docker run --rm --gpus all --privileged tensorflow/tensorflow:latest-gpu-jupyter \
        python -c "import tensorflow as tf; print(tf.config.list_physical_devices('GPU'))"

    tmp=$(mktemp -d -t nvman.XXXXXXXXXX)
    cd "$tmp"
    git clone https://github.com/NVIDIA/cuda-samples.git
    cd cuda-samples/Samples/1_Utilities/deviceQuery
    make
    ./deviceQuery
    rm -rf "$tmp"
}

# shellcheck disable=SC2034
cmd_uninstall_help="<cuda|cudnn> <VERSION>"
cmd_uninstall() {
    [[ $# -ne 2 ]] && bs_fatal "Invalid argument: $*"
    pkg=$1
    version=$2
    src="$HOME/.nvman/$pkg-$version"
    [[ -d "$src" ]] || bs_fatal "Not installed: $pkg-$version"
    current=$(readlink -f "$HOME/.nvman/$pkg-current")
    [[ "$src" == "$current" ]] && bs_fatal "Cannot uninstall current: $pkg-$version"
    rm -rf "$src"
}

bs_cmd_args "$@"
