#!/bin/bash

# Upgrade .dotfiles and related packages

set -euo pipefail

if [[ -f "$HOME/.dotfiles/files/bs.sh" ]]; then
    # shellcheck source=/dev/null
    source "$HOME/.dotfiles/files/bs.sh"
else
    eval "$(curl -fsSL bit.ly/bs-dot-sh)"
fi

cmd_os() {
    bs_info_box "Upgrading system packages"
    case "$BS_UNAME_S" in
        Darwin)
            brew update
            brew upgrade
            brew cleanup
            brew autoremove
            ;;
        Linux)
            sudo aptitude -y update
            sudo aptitude -y upgrade
            sudo aptitude -y autoclean
            sudo apt-get -y autoremove
            dpkg-query -l | grep '^rc' | awk '{print $2}' | xargs -r sudo aptitude -y purge || true
            if type snap &> /dev/null; then
                sudo snap refresh
            fi
            if [[ "$(lsb_release --id --short)" == Pop ]]; then
                pop-upgrade recovery upgrade from-release
            fi
            ;;
    esac
}

cmd_git() {
    bs_info_box "Upgrading Git Repository"
    git pull --rebase --autostash
    # Update direct (non-recursive) submodules to remote HEAD
    git submodule update --init --remote
    # Update recursive submodules to their parents' recorded SHA-1
    git submodule foreach git submodule update --init --recursive
    for path in $(git submodule status  | grep '^[^ ]' | awk '{print $2}'); do
        git add -f "$path"
        git commit --message "[zsh] upgrade $(basename "$path")"
    done
    git push

    if [[ -d "$HOME/.dotfiles/private" ]] && curl -fsSL --connect-timeout 1 --output /dev/null gitlab.home.lyh.me &> /dev/null; then
        cd "$HOME/.dotfiles/private"
        git pull --rebase --autostash
        git push
    fi
}

cmd_omz() {
    bs_info_box "Upgrading Oh-My-Zsh"
    zsh -i -c "omz update"
}

cmd_docker() {
    type docker &> /dev/null || return 0
    bs_info_box "Upgrading Docker"
    if [[ "$BS_UNAME_S" == "Darwin" ]] && ! docker ps &> /dev/null; then
        open -a Docker
        bs_info "Waiting for Docker daemon"
        while ! docker ps &> /dev/null; do
            sleep 1
        done
    fi
    for image in $(docker images --format "{{.Repository}}:{{.Tag}}" | grep -v ':<none>' | grep -v '\.amazonaws\.com/' | grep -v '\.pkg\.dev/' ); do
        digest=$(docker inspect "$image" | jq --raw-output ".[].RepoDigests[]")
        platform=$(docker inspect "$image" | jq --raw-output '.[] | "\(.Os)/\(.Architecture)"')
        [[ -z "$digest" ]] || docker pull --platform "$platform" "$image"
    done
    for file in $(docker compose ls --format json | jq --raw-output '.[].ConfigFiles'); do
        docker compose --file "$file" up --detach
    done
    docker images --quiet --filter dangling=true | xargs -r docker rmi
}

cmd_go() {
    bs_info_box "Upgrading Go"
    if [[ -d /usr/local/go ]]; then
        os=$(echo "$BS_UNAME_S" | tr "[:upper:]" "[:lower:]")
        arch=$(dpkg --print-architecture)
        tarball=$(curl -fsSL "https://go.dev/dl" | grep -oP '(?<=href=")[^"]+(?=")' | grep "/dl/go.*\.$os-$arch\.tar\.gz" | tac | tail -n 1)
        latest=$(echo "$tarball" | sed "s/^\/dl\/\(go.*\)\.$os-$arch\.tar\.gz$/\1/")
        current=$(go version | awk '{ print $3 }')
        if [[ "$latest" != "$current" ]]; then
            read -n 1 -r -p "Upgrade from $current to $latest? (y/N) "
            echo
            if [[ $REPLY =~ ^[Yy]$ ]]; then
                sudo rm -rf /usr/local/go
                "$HOME/.dotfiles/files/install.sh" go
            fi
        fi
    fi
    if [[ -d "$HOME/.go/bin" ]]; then
        for mod in $(go version -m "$HOME/.go/bin" | grep '^\s\+path\s\+' | awk '{print $2}'); do
            go install "$mod@latest"
        done
    fi
}

cmd_jvm() {
    bs_info_box "Upgrading JVM"
    "$HOME/.dotfiles/files/sdkman.sh"
}

cmd_rust() {
    bs_info_box "Upgrading Rust"
    rustup update
    # Bash 3 on Mac missing readarray
    if [[ -s "$HOME/.cargo/.crates.toml" ]]; then
        # shellcheck disable=SC2207
        crates=($(grep '^"[^"]*" = \["[^"]*"\]$' "$HOME/.cargo/.crates.toml" | sed 's/^"\([^ ]*\) .*$/\1/'))
        for c in "${crates[@]}"; do
            cargo install --quiet "$c"
        done
    fi
}

upgrade() {
    cd "$HOME"
    cmd_os
    cmd_git
    cmd_omz
    cmd_docker
    cmd_go
    cmd_jvm
    cmd_rust
    bs_success_box "Upgrade complete"
}

bs_cmd_optional upgrade "$@"
