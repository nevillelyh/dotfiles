#!/bin/bash

# NVIDIA CUDA and cnDNN Manager

set -euo pipefail

die() {
    echo "Error: $1"
    exit 1
}

help() {
    echo "Usage: $(basename "$0") <command> [arg]..."
    echo
    echo "  commands:"
    echo "    env"
    echo "    install <runfile|tarball>"
    echo "    list"
    echo "    help"
}

help_and_die() {
    echo "$1"
    echo
    help
    exit 1
}

env() {
    [[ $# -ne 0 ]] && help_and_die "Invalid argument: $*"
    [[ ! -d $HOME/.nvman ]] && exit 0
    cuda=$HOME/.nvman/cuda-current
    [[ ! -L $cuda ]] && die "CUDA not installed"
    cudnn=$HOME/.nvman/cudnn-current
    [[ ! -L $cudnn ]] && die "cuDNN not installed"
    echo "export PATH=$cuda/bin${PATH:+:${PATH}}"
    echo "export LD_LIBRARY_PATH=$cuda/lib64:$cudnn/lib${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}"
}

install_cuda() {
    cuda_version=$(echo "$1" | grep -Po "(?<=^cuda_)[0-9\.]+")
    dest=$HOME/.nvman/cuda-$cuda_version
    if [[ -d $dest ]]; then
        die "CUDA $cuda_version already installed"
    fi
    echo "Installing CUDA $cuda_version in $dest"
    mkdir -p "$HOME/.nvman"
    bash "$1" --silent --installpath="$dest" --toolkit --samples --no-opengl-libs --no-drm
    link=$HOME/.nvman/cuda-current
    rm -f "$link"
    ln -rs "$dest" "$link"
}

install_cudnn() {
    # shellcheck disable=SC2001
    cudnn_version=$(echo "$1" | sed "s/cudnn-[^-]*-[^-]*-\([^-]*\)_cuda.*/\1/")
    dest=$HOME/.nvman/cudnn-$cudnn_version
    if [[ -d $dest ]]; then
        die "cuDNN $cudnn_version already installed"
    fi
    echo "Installing CUDNN $cudnn_version in $dest"
    mkdir -p "$HOME/.nvman"
    tar xJf "$1" -C "$HOME/.nvman"
    base=$(basename "$1" .tar.xz)
    mv "$HOME/.nvman/$base" "$dest"
    link=$HOME/.nvman/cudnn-current
    rm -f "$link"
    ln -rs "$dest" "$link"
}

install() {
    [[ $# -lt 1 ]] && help_and_die "Missing RUNFILE or TARBALL"
    [[ $# -gt 1 ]] && help_and_die "Invalid argument: $*"
    type lspci &> /dev/null || die "GPU not found"
    lspci | grep -i nvidia &> /dev/null || die "GPU not found"

    base=$(basename "$1")
    ext="${base##*.}"
    case "$ext" in
        run)
            install_cuda "$1"
            ;;
        xz)
            install_cudnn "$1"
            ;;
        *)
            die "Unsupported file: $1"
    esac
}

list() {
    [[ $# -ne 0 ]] && help_and_die "Invalid argument: $*"
    [[ ! -d $HOME/.nvman ]] && die "nvman not installed"
    cuda=()
    [[ -L "$HOME/.nvman/cuda-current" ]] && current="$(basename "$(readlink -f "$HOME/.nvman/cuda-current")")" || current="UNKNOWN"
    for c in "$HOME"/.nvman/cuda-*; do
        c="$(basename "$c")"
        if [[ "$c" != "cuda-current" ]]; then
            v="${c//cuda-/}"
            [[ "$c" == "$current" ]] && v="*$v"
            cuda+=("$v")
        fi
    done
    if [[ "${#cuda[@]}" -eq 0 ]]; then
        echo "CUDA not installed"
    else
        echo "CUDA: ${cuda[*]}"
    fi
    cudnn=()
    [[ -L "$HOME/.nvman/cudnn-current" ]] && current="$(basename "$(readlink -f "$HOME/.nvman/cudnn-current")")" || current="UNKNOWN"
    for c in "$HOME"/.nvman/cudnn-*; do
        c="$(basename "$c")"
        if [[ "$c" != "cudnn-current" ]]; then
            v="${c//cudnn-/}"
            [[ "$c" == "$current" ]] && v="*$v"
            cudnn+=("$v")
        fi
    done
    if [[ "${#cudnn[@]}" -eq 0 ]]; then
        echo "cuDNN not installed"
    else
        echo "cuDNN: ${cudnn[*]}"
    fi
}

if [[ $# -eq 0 ]]; then
    help
    exit 1
fi

case "$1" in
    env)
        shift
        env "$@"
        ;;
    install)
        shift
        install "$@"
        ;;
    list)
        shift
        list "$@"
        ;;
    help)
        help
        ;;
    *)
        help_and_die "Invalid command: $1"
        ;;
esac
