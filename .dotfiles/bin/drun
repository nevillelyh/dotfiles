#!/bin/bash

# Common docker run shortcuts

set -euo pipefail

if [[ -f "$HOME/.dotfiles/files/bs.sh" ]]; then
    # shellcheck source=/dev/null
    source "$HOME/.dotfiles/files/bs.sh"
else
    eval "$(curl -fsSL bit.ly/bs-dot-sh)"
fi

env() {
    local name=$1

    local default
    if [[ $# -eq 2 ]]; then
        default=$2
    else
        case $name in
            DB) default=dev ;;
            DB_USER) default=dev ;;
            DB_PASS) default=devpass ;;
            ROOT_PASS) default=rootpass ;;
            COCKROACH_PORT) default=26257 ;;
            MARIADB_PORT) default=3306 ;;
            MYSQL_PORT) default=3306 ;;
            POSTGRES_PORT) default=5432 ;;
            TRINO_PORT) default=8080 ;;
            UI_PORT) default=8080 ;;
        esac
    fi
    local value=${!name:-$default}
    echo >&2 -e "$(bs_warn "$name=$value")"
    echo "$value"
}

docker_run() {
    echo >&2 -e "$(bs_success "docker run $*")"
    docker run --label dotfiles.bin.drun=true "$@"
}

docker_srv() {
    local name=$1
    shift
    docker_run --name "$name" -d --rm "$@"
    docker logs -f "$name"
}

docker_cli() {
    local name=$1
    shift
    # TTY for CLIs, e.g. psql
    docker_run --name "$name-$(bs_timestamp)" -it --rm --network host "$@"
}

docker_cmd() {
    local name=$1
    shift
    # no TTY for commands with stdin/stdout, e.g. kcat
    docker_run --name "$name-$(bs_timestamp)" -i --rm --network host "$@"
}

cmd_killall() {
    docker ps --quiet --filter label=dotfiles.bin.drun=true | xargs -r docker kill
}

cmd_ps() {
    docker ps --filter label=dotfiles.bin.drun=true
}

cmd_cockroach_help="<server|sql>"
cmd_cockroach() {
    if [[ $# -lt 1 ]]; then
        bs_fatal "Usage: drun cockroach $cmd_cockroach_help [ARG]..."
    fi
    cmd=$1
    shift
    case $cmd in
        server) cockroach_server "$@" ;;
        sql) cockroach_sql "$@" ;;
    esac
}

cockroach_server() {
    docker_srv cockroach \
        --env COCKROACH_DATABASE="$(env DB)" \
        --env COCKROACH_USER="$(env DB_USER)" \
        --env COCKROACH_PASSWORD="$(env DB_PASS)" \
        --publish "$(env COCKROACH_PORT)":26257 \
        --publish "$(env UI_PORT)":8080 \
        cockroachdb/cockroach:latest start-single-node "$@"
}

cockroach_sql() {
    local url
    url="postgresql://$(env DB_USER):$(env DB_PASS)@localhost:$(env COCKROACH_PORT)/$(env DB)?sslmode=require"
    docker_cli cockroach-cli \
        cockroachdb/cockroach:latest sql --url "$url" "$@"
}

cmd_mariadb_help="<server|cli>"
cmd_mariadb() {
    if [[ $# -lt 1 ]]; then
        bs_fatal "Usage: drun mariadb $cmd_mariadb_help [ARG]..."
    fi
    cmd=$1
    shift
    case $cmd in
        server) mariadb_server "$@" ;;
        cli) mariadb_cli "$@" ;;
    esac
}

mariadb_server() {
    docker_srv mariadb \
        --env MARIADB_ROOT_PASSWORD="$(env ROOT_PASS)" \
        --env MARIADB_DATABASE="$(env DB)" \
        --env MARIADB_USER="$(env DB_USER)" \
        --env MARIADB_PASSWORD="$(env DB_PASS)" \
        --publish "$(env MARIADB_PORT)":3306 \
        mariadb:latest "$@"
}

mariadb_cli() {
    docker_cli mariadb-cli \
        mariadb:latest mariadb \
        --host=localhost --port="$(env MARIADB_PORT)" --protocol=tcp \
        --database="$(env DB)" --user="$(env DB_USER)" --password="$(env DB_PASS)" \
        "$@"
}

cmd_mysql_help="<server|cli>"
cmd_mysql() {
    if [[ $# -lt 1 ]]; then
        bs_fatal "Usage: drun mysql $cmd_mysql_help [ARG]..."
    fi
    cmd=$1
    shift
    case $cmd in
        server) mysql_server "$@" ;;
        cli) mysql_cli "$@" ;;
    esac
}

mysql_server() {
    docker_srv mysql \
        --env MYSQL_ROOT_PASSWORD="$(env ROOT_PASS)" \
        --env MYSQL_DATABASE="$(env DB)" \
        --env MYSQL_USER="$(env DB_USER)" \
        --env MYSQL_PASSWORD="$(env DB_PASS)" \
        --publish "$(env MYSQL_PORT)":3306 \
        mysql:latest "$@"
}

mysql_cli() {
    docker_cli mysql-cli \
        mysql:latest mysql \
        --host=localhost --port="$(env MYSQL_PORT)" --protocol=tcp \
        --database="$(env DB)" --user="$(env DB_USER)" --password="$(env DB_PASS)" \
        "$@"
}

cmd_postgres() {
    docker_srv postgres \
        --env POSTGRES_DB="$(env DB)" \
        --env POSTGRES_USER="$(env DB_USER)" \
        --env POSTGRES_PASSWORD="$(env DB_PASS)" \
        --publish "$(env POSTGRES_PORT)":5432 \
        postgres:latest "$@"
}

cmd_psql() {
    docker_cli postgres-cli \
        --env PGPASSWORD="$(env DB_PASS)" \
        postgres:latest psql \
        --host=localhost --port="$(env POSTGRES_PORT)" \
        --dbname="$(env DB)" --username="$(env DB_USER)" \
        "$@"
}

cmd_trino_help="<server|cli>"
cmd_trino() {
    if [[ $# -lt 1 ]]; then
        bs_fatal "Usage: drun trino $cmd_trino_help [ARG]..."
    fi
    cmd=$1
    shift
    case $cmd in
        server) trino_server "$@" ;;
        cli) trino_cli "$@" ;;
    esac
}

trino_server() {
    docker_srv trino \
        --publish "$(env TRINO_PORT)":8080 \
        trinodb/trino:latest "$@"
}

trino_cli() {
    docker_cli trino-cli \
        trinodb/trino:latest trino "$@"
}

bs_cmd_args "$@"
